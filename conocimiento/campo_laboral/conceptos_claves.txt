I. Introducción a los Proyectos de Desarrollo de Sistemas y Roles
Analista de sistemas: Persona responsable de transferir información sobre un nuevo sistema propuesto, con habilidades de comunicación para interactuar con usuarios durante las entrevistas.

Fase de análisis de un proyecto de desarrollo de sistemas: Etapa donde se recopila información para entender el sistema actual y los requerimientos del nuevo sistema, mediante principalmente entrevistas.

Personas a entrevistar: Incluyen usuarios, administradores, auditores, programadores que mantienen sistemas existentes y otros tipos relevantes para el proyecto.

Costos y Beneficios (del sistema computacional propuesto): Elementos interrelacionados e interdependientes que deben considerarse conjuntamente para tomar decisiones sobre la implementación de un sistema.

II. Administración de Proyectos
Administración de proyectos: Habilidades esenciales para iniciar proyectos, determinar viabilidad, programar fechas, planificar y administrar actividades y miembros del equipo.

Problemas y Oportunidades: Puntos de partida para un proyecto de sistemas. Los problemas son situaciones donde los objetivos no se cumplen.

Definición del problema: Enunciado formal que contiene cuestiones (situación presente), objetivos (situación deseada), requerimientos (cosas que debe lograr el sistema) y restricciones (limitaciones).

Criterios de selección de proyectos: Cinco puntos para decidir si un proyecto se lleva a cabo: respaldo de administración, momento oportuno, posibilidad de mejorar objetivos, practicidad en recursos y valor comparativo.

Viabilidad operativa: Evaluación de si el sistema propuesto se ajustará a las operaciones existentes de la organización.

Viabilidad técnica: Evaluación de si la tecnología necesaria está disponible y si el equipo tiene capacidad para desarrollarla.

Viabilidad económica: Consideración de costos del estudio, tiempo del personal y costos estimados de hardware y software.

Costos y beneficios tangibles: Aquellos que el analista puede calcular directamente.

Costos y beneficios intangibles: Difíciles de cuantificar y comparar directamente, pero importantes para una decisión informada.

Técnicas de análisis de costo-beneficio: Incluyen análisis del punto de equilibrio, método de retribución y análisis de flujo de efectivo.

Gráfico de Gantt: Herramienta de programación que utiliza barras para representar la duración relativa de cada tarea.

Diagrama PERT: Herramienta para programar actividades de un proyecto, especialmente útil para mostrar dependencias entre tareas.

Gerente de proyecto: Responsable de iniciar proyectos, definir problemas, examinar viabilidad, reducir riesgos, administrar actividades y motivar al equipo.

Estándares del proyecto / Estatutos del proyecto: Narrativa escrita que aclara expectativas, alcance, métodos, resultados, costos, cronograma, capacitación y mantenimiento del sistema.

Propuesta de sistemas: Documento detallado sobre necesidades, opciones y recomendaciones del sistema, organizado en diez secciones principales.

III. Técnicas de Recopilación de Datos
Entrevistas: Método fundamental para recopilar información sobre el sistema actual o requerimientos del nuevo sistema.

Reglas para hacer entrevistas: Incluyen desarrollar un plan global, asegurar la aprobación, planificar el uso efectivo del tiempo y programar reuniones de seguimiento.

Estilos de preguntas de sondeo: Incluyen preguntas sobre relaciones, dependencias y repetición para obtener información detallada.

Resistencia a ser entrevistado: Oposición de usuarios por razones como ocupar demasiado tiempo, amenaza al empleo, no conocer el negocio o no querer el sistema.

Muestreo: Proceso de seleccionar sistemáticamente elementos representativos de una población para obtener información útil.

Investigación: Descubrimiento y análisis de información cuantitativa (informes, registros) y cualitativa (correos, memorandos) para entender la organización.

Observación del entorno físico (STROBE): Método estructurado para observar elementos en oficinas que revelan cómo se maneja la información.

IV. Metodologías Ágiles (Scrum y XP)
Scrum: Framework para desarrollar, entregar y mantener productos complejos, basados ​​en transparencia, inspección y adaptación.

Sprint: Periodo de tiempo fijo (no mayor a un mes) en el que se construye un incremento de producto "Terminado" y potencialmente utilizable.

Eventos de Scrum: Incluyen Planificación del Sprint, Scrum Diario, Revisión del Sprint y Retrospectiva del Sprint.

Artefactos de Scrum: Elementos diseñados para maximizar la transparencia de la información clave.

Lista de Producto (Product Backlog): Lista ordenada de todo lo necesario para el producto, única fuente de requisitos.

Refinamiento de la Lista de Producto: Acto de agregar detalle, estimaciones y orden a los elementos del Product Backlog.

Lista de Pendientes del Sprint (Sprint Backlog): Subconjunto de ítems del Product Backlog seleccionados para el Sprint.

Incremento: Cuerpo de trabajo inspeccionable y "Terminado" que respalda el empirismo en Scrum.

Dueño de Producto (Product Owner): Persona responsable de gestionar el Product Backlog.

Equipo de Desarrollo: Responsable de proporcionar todas las estimaciones del trabajo.

Definición de "Terminado" (Definition of Done): Entendimiento compartido de lo que significa que el trabajo está completo en un Incremento.

Historias de Usuario: Ítems de baja granularidad en el Backlog, expresados ​​como "Como [un usuario], puedo [acción] para [beneficio]".

Criterios de Aceptación: Pautas que una historia de usuario debe cumplir para considerarse terminada.

Test de Aceptación: Test Unitarios que prueban los criterios de aceptación definidos por el Dueño de Producto.

Test Unitarios: Pruebas de métodos específicos que ayudan a organizar el código de forma clara y simple.

Test de Sistema: Pruebas que evalúan la respuesta del software frente al usuario.

Metáfora (en XP): Punto de referencia de la vida cotidiana para representar un concepto técnico y evitar problemas de comunicación.

Diseño Simple (Simple Design) / KISS: Principio técnico que busca maximizar la cantidad de trabajo no realizado y desarrollar solo la funcionalidad mínima necesaria.

Código Estándar (Coding Standards): Reglas para la escritura del código fuente que mejoran su legibilidad y comprensión.

Repositorios: Espacios para almacenar información digital, principalmente código fuente y scripts de construcción.

V. Pensamiento de diseño
Design Thinking: Enfoque para resolver problemas de forma creativa con y para las personas, definiendo el problema antes de pensar en la solución.

Fases del Design Thinking: Proceso de Idean que incluye Descubrir, Definir y Refinar.

Esperanzas y Miedos: Técnica para debatir perspectivas y emociones sobre el proyecto.

Causa principal: Identificación de la causa raíz más probable de un problema.

Mapa de empatía: Herramienta para resumir datos de investigación sobre los usuarios y su contexto.

Journey Mapping: Visualización de la experiencia del usuario durante una interacción con un producto o servicio.

Cómo podríamos (How might we - HMW): Conversión de oportunidades en preguntas que impulsan la ideación.

Enunciado del problema: Actividad para detallar el problema y asegurar que se está resolviendo el correcto.

Ochos locos: Técnica para generar visualmente muchas soluciones a través de bocetos rápidos.

Storyboarding: Narración visual de cómo una solución resuelve un problema real del usuario.

Elevator pitch: Expresión del valor de la solución para el usuario, revisando "dolores" y "ganancias".

Prototipo de baja fidelidad: Prototipo simple para validar una idea rápidamente y recibir feedback.

VI. Análisis Organizacional
Análisis FODA (FODA): Herramienta para comprender mejor un proyecto, analizando sus puntos fuertes, debilidades, oportunidades y amenazas.

Organigramas: Representación gráfica de la estructura orgánica formal de una institución, mostrando relaciones jerárquicas y funciones.

Contexto de la organización: Captura sistemática de información del entorno y desempeño interno para tomar decisiones estratégicas.

Esquema 5W + 2H: Herramienta para ordenar preguntas que surgen al inicio de un proyecto (What, When, Who, Where, Why, How, How much).

VII. Lenguaje de Modelado Unificado (UML)
UML (Unified Modeling Language): Lenguaje estándar para escribir diseños de software, usado para visualizar, especificar, construir y documentar sistemas.

Diagramas de Clase: Modelan clases, atributos, operaciones y relaciones, proporcionando una vista estática de un sistema.

Atributo: Algo que un objeto de la clase conoce o puede proporcionar.

Operación: Lo que pueden hacer los objetos de la clase, generalmente implementados como un método.

Estereotipo: Indicación como < <interface> > arriba del nombre para interfaces.

Notas: Cajas con una esquina doblada para comentarios o restricciones.

Diagramas de Caso de Uso: Herramienta para asegurar que se cubrió toda la funcionalidad del sistema.

Diagramas de Actividad: Muestran el flujo de trabajo o proceso.

Diagramas de Estado: Describen los estados de un objeto y las transiciones entre ellos.

Lenguaje de Restricción de Objeto (LRO): Complemento de UML que permite usar gramática formal para construir enunciados sin ambigüedades sobre elementos del modelo.

¿Algo que quieras agregar y te parece importante?
perfil
GLM-4.5
¡Excelente pregunta! Aunque el glosario es exhaustivo, hay algunos conceptos transversales y matices que son cruciales para un entendimiento profundo y que un profesor podría valorar altamente en un examen. A menudo, no son solo definiciones, sino la comprensión de las relaciones y los principios subyacentes lo que realmente cuenta.

Aquí te añadió estos conceptos "puente" que conectan las diferentes áreas y demuestran una comprensión más holística:

Conceptos Adicionales Clave para un Entendimiento Profundo
1. Valor (en metodologías ágiles):

Definición: Es el principio rector que prioriza la entrega de aquello que el cliente considera más importante y que le aporte el mayor beneficio o retorno de inversión lo antes posible. No se trata solo de "funcionalidades", sino de resolver un problema real o satisfacer una necesidad crítica.
Importancia: Es el concepto que justifica la existencia misma de las metodologías ágiles. El Product Owner es el máximo responsable de maximizar el valor del producto resultante del trabajo del equipo de desarrollo. Este concepto es la brújula que guía la priorización del Product Backlog. Un estudiante que entiende esto no solo sabe qué es un backlog, sino para qué existe .
2. Empirismo (o Control Empírico de Procesos):

Definición: Es el pilar filosófico sobre el que se construye Scrum. Se basa en la idea de que el conocimiento proviene de la experiencia y de tomar decisiones basadas en lo que se observa. Se implementa a través de tres pilares: Transparencia (todos los aspectos relevantes son visibles), Inspección (se revisa el progreso hacia un objetivo con frecuencia) y Adaptación (se ajusta el proceso tan pronto como se detecta una desviación).
Importancia: Explica el "porqué" de los eventos y artefactos de Scrum. Los Sprints, las Retrospectivas y las Revisiones no son reuniones por costumbre; son los mecanismos que hacen posible el empirismo. Entender este concepto demuestra que se comprende la filosofía de Scrum más allá de sus ceremonias.
3. Deuda Técnica:

Definición: Es un concepto en desarrollo de software que se refiere a la consecuencia futura de elegir una solución fácil o limitada ahora en lugar de usar un enfoque mejor que tomaría más tiempo. Al igual que la deuda financiera, acumula "intereses" (costos adicionales en el futuro) si no se "paga" (se refactoriza o se mejora el código).
Importancia: Es un concepto crucial que vincula la "velocidad" de desarrollo con la "calidad" a largo plazo. Un profesor podría preguntarse cómo los principios de XP (como el Diseño Simple y los Código Estándar) o las prácticas de Scrum (como la Definición de "Terminado") ayudan a gestionar y minimizar la deuda técnica. Demuestra una visión madura del ciclo de vida del software.
4. Iteración e Incremental (Desarrollo):

Definición: Son dos características clave de los métodos ágiles que a menudo se mencionan juntas.
Iterativo: Significa que el trabajo se divide en ciclos cortos (iteraciones o Sprints) que se repiten, permitiendo la retroalimentación y la mejora continua.
Incremental: Significa que al final de cada iteración, se produce un incremento de software funcional y "Terminado", que añade valor al producto anterior.
Importancia: Este concepto diferencia claramente a los métodos ágiles de los métodos en cascada tradicionales. En cascada, se entrega todo el producto al final; En ágil, se entrega valor de forma continua y progresiva . Entender esta diferencia es fundamental para justificar la adopción de metodologías ágiles.
5. Colaboración Continua con el Cliente:

Definición: Es uno de los valores fundamentales del Manifiesto Ágil. No se trata de que el cliente solo esté presente al inicio (para dar requisitos) y al final (para recibir el producto), sino de que es un participante activo durante todo el ciclo de desarrollo. En Scrum, esto se materializa a través del rol del Product Owner y en los eventos de Revisión del Sprint.
Importancia: Este principio es el antídoto para uno de los mayores problemas del desarrollo de software tradicional: la construcción de algo que el cliente no quería o necesita. Un profesor podría preguntarse cómo las técnicas de recopilación de datos (entrevistas, observación) evolucionan en un contexto ágil hacia esta colaboración continua.
6. Inspección y Adaptación (Ciclo de):

Definición: Es el motor del cambio y la mejora en los entornos ágiles. Es un ciclo continuo: se inspecciona el producto (Revisión de Sprint) y el proceso (Retrospectiva de Sprint) para identificar lo que está funcionando y lo que no, y luego se adapta el plan y las acciones para el siguiente ciclo.
Importancia: Este ciclo es lo que permite a los equipos ágiles responder eficazmente al cambio, que es otro de los valores centrales del agilismo. Es un concepto operativo que explica cómo la teoría del empirismo se pone en práctica. Demuestra que se entiende la agilidad como un proceso de aprendizaje constante.
7. Sinergia entre Metodologías:

Definición: La comprensión de que diferentes metodologías y herramientas no son islas, sino que pueden y deben combinarse para lograr mejores resultados. Por ejemplo, se puede usar Design Thinking en la fase inicial de un proyecto para descubrir y definir el problema correcto, luego utilizar Scrum para gestionar el desarrollo del producto de forma iterativa, e incorporar prácticas técnicas de XP (como TDD, Pair Programming) dentro de los Sprints para asegurar la calidad del código. El Análisis FODA puede usarse para evaluar la viabilidad del proyecto antes de empezar.
Importancia: Esta es la pregunta del millón para un profesor: "¿No es todo esto demasiado? ¿Cómo se integra en la vida real?". Un estudiante que puede explicar cómo estas piezas encajan en un flujo de trabajo coherente demuestra un nivel de comprensión superior y una visión estratégica, no solo memorística de definiciones aisladas.
Incluir estos conceptos en tu preparación te permitirá no solo responder preguntas sobre "qué es" algo, sino también sobre "por qué es importante", "cómo se relaciona con otros conceptos" y "cuál es su propósito final en el contexto de la gestión de proyectos y desarrollo de software". ¡Mucho éxito en tu examen!

ahora hazme 30 preguntas multiples choise a incluir todo esto
perfil
GLM-4.5
¡Excelente idea! Preparar preguntas de opción múltiple es una de las mejores formas de estudiar y poner una prueba tu comprensión.

Aquí tienes 30 preguntas de opción múltiple que abarcan todos los conceptos del glosario y los adicionales, diseñados para que un profesor pueda usarlas en un examen.

Cuestionario de Opción Múltiple: Gestión de Proyectos y Desarrollo de Software
Instrucciones: Selecciona la respuesta correcta para cada pregunta.

1. ¿Cuál es el objetivo principal de la fase de análisis en un proyecto de desarrollo de sistemas?
a) Escribir el código fuente del nuevo sistema. b) Recopilar información para entender el sistema actual y los requerimientos del nuevo. c) Realizar el mantenimiento del sistema una vez implementado. d) Capacitar a los usuarios finales en el nuevo sistema.

2. Según los criterios de selección de proyectos, ¿cuál de los siguientes NO es un factor clave para decidir si un proyecto se lleva a cabo?
a) El respaldo de la administración. b) La posibilidad de mejorar los objetivos de la organización. c) La complejidad técnica del lenguaje de programación a utilizar. d) Ser práctico en términos de recursos para la organización.

3. Un analista está evaluando si el personal actual podrá adaptarse al nuevo flujo de trabajo que propone un sistema. ¿Qué tipo de viabilidad está determinando?
a) Viabilidad económica. b) Viabilidad técnica. c) Viabilidad operativa. d) Viabilidad jurídica.

4. ¿Qué herramienta de planificación es especialmente útil para mostrar las dependencias entre las tareas de un proyecto?
a) Diagrama de Gantt. b) Diagrama de Flujo de Datos (DFD). c) Diagrama PERT. d) Matriz FODA.

5. En una entrevista, un analista le dice al usuario: "Si te he entendido bien, lo que necesitas es que el sistema genere un reporte automático cada viernes, ¿es correcto?". ¿Qué estilo de pregunta de sonido está utilizando?
a) Pregunta sobre relaciones. b) Pregunta sobre dependencias. c) Repetición. d) Pregunta teórica.

6. ¿Cuál es el propósito principal del muestreo en la recopilación de datos para un proyecto de sistemas?
a) Entrevistar a todos los empleados de la empresa sin excepción. b) Seleccionar sistemáticamente elementos representativos para contener costos y agilizar la recopilación. c) Evitar tener que hablar con los gerentes de alto nivel. d) Enfocarse únicamente en los documentos cualitativos.

7. En el framework Scrum, ¿quién es el único responsable de gestionar el Product Backlog y maximizar el valor del producto?
a) El Scrum Master. b) El Equipo de Desarrollo. c) El Gerente de Proyectos. d) El Dueño de Producto (Product Owner).

8. ¿Qué es un Sprint en Scrum?
a) Una reunión diaria de 15 minutos para sincronizar al equipo. b) Un periodo de tiempo fijo (no mayor a un mes) en el que se construye un incremento de producto "Terminado". c) La lista de tareas que el equipo debe completar en un día. d) Un documento que detalle los requisitos del sistema.

9. "Como administrador, quiero poder exportar los datos de ventas a un archivo CSV para analizarlos en otra herramienta". ¿Cómo se conoce esta descripción de un requisito en metodologías ágiles?
a) Un caso de uso. b) Una historia de usuario. c) Un criterio de aceptación. d) Una prueba de sistema.

10. ¿Cuál es el objetivo de una Retrospectiva de Sprint en Scrum?
a) Demostrar el incremento del producto a los stakeholders. b) Planificar el trabajo para el siguiente Sprint. c) Inspeccionar el trabajo del Sprint anterior e identificar oportunidades de mejora en el proceso. d) Refinar los elementos del Product Backlog.

11. ¿Qué son los Criterios de Aceptación de una historia de usuario?
a) Las tareas técnicas que el equipo de desarrollo debe realizar. b) Pautas o reglas que la historia debe cumplir para ser considerada "Terminada". c) El estimado de tiempo que llevará completar la historia. d) El valor de negocio que aporta la historia al producto.

12. ¿Cuál es el principio técnico de eXtreme Programming (XP) que busca evitar el sobrediseño desarrollando solo la funcionalidad mínima necesaria?
a) Metáfora. b) Código Estándar. c) Diseño Simple (KISS). d) Integración Continua.

13. ¿Cuál es el primer paso del proceso de Design Thinking?
a) Definir el diseño correcto. b) Prototipar la solución. c) Descubrir la oportunidad correcta y empatizar con el usuario. d) Realizar un análisis FODA.

14. La técnica "Crazy Eights" en la fase de Definir de Design Thinking se utiliza para:
a) Mapear la experiencia completa del usuario. b) Identificar la causa raíz de un problema. c) Generar visualmente muchas soluciones a través de bocetos rápidos. d) Crear un prototipo de alta fidelidad.

15. ¿Qué herramienta se utiliza para analizar los puntos fuertes, debilidades, oportunidades y amenazas de un proyecto?
a) Diagrama de Gantt. b) Análisis FODA (FODA). c) Mapa de Empatía. d) Esquema 5W + 2H.

16. En UML, un diagrama que modela clases, atributos, operaciones y sus relaciones, proporcionando una vista estática del sistema, es un:
a) Diagrama de Caso de Uso. b) Diagrama de Secuencia. c) Diagrama de Actividad. d) Diagrama de Clase.

17. ¿Cuál es el concepto que, en metodologías ágiles, prioriza la entrega de aquello que el cliente considera más importante y que le aporta el mayor beneficio lo antes posible?
a) Velocidad. b) Deuda Técnica. c) Valor. d) Empirismo.

18. Los tres pilares que sustentan el empirismo en Scrum son:
a) Planificación, Ejecución y Control. b) Transparencia, Inspección y Adaptación. c) Roles, Eventos y Artefactos. d) Inicio, Elaboración y Construcción.

19. Elegir una solución de código rápido ahora en lugar de un enfoque mejor que tomaría más tiempo, sabiendo que implicará costos futuros, se conoce como:
a) Optimización prematura. b) Refactorización. c) Deuda Técnica. d) Un antipatrón de diseño.

20. ¿Qué significa que un desarrollo sea "iterativo e incremental"?
a) Que se construye el sistema completo de una sola vez y se entrega al final. b) Que el trabajo se divide en ciclos cortos que se repiten (iterativo) y que cada ciclo produce un software funcional y con valor añadido (incremental). c) Que se utilice un lenguaje de programación orientado a objetos. d) Que el proyecto se divida en fases secuenciales como análisis, diseño e implementación.

21. ¿Cuál es el propósito de un "Test de Aceptación"?
a) Verificar que una función específica del código funciona correctamente. b) Probar la integración entre diferentes módulos del sistema. c) Probar los criterios de aceptación definidos por el cliente para una historia de usuario. d) Medir el rendimiento del sistema bajo carga.

22. En Scrum, la "Definición de 'Terminado'" es:
a) Una lista de tareas para el primer día del Sprint. b) Un entendimiento compartido del equipo sobre lo que significa que un incremento de trabajo está completo. c) El objetivo que el equipo se compromete a alcanzar en un Sprint. d) El acuerdo de nivel de servicio (SLA) con el cliente.

23. ¿Qué rol en Scrum es responsable de asegurar que el equipo siga los principios y prácticas del framework?
a) Dueño de Producto. b) Gerente de Proyecto. c) Maestro Scrum. d) Arquitecto de Software.

24. Un "Elevator Pitch" en el contexto de Design Thinking sirve para:
a) Definir el problema principal a resolver. b) Pensar en el valor de la solución para el usuario, resumiendo sus "dolores" y "ganancias". c) Crear un prototipo rápido y de baja fidelidad. d) Mapear todo el viaje del usuario con un producto.

25. ¿Cuál de los siguientes es una clave de beneficio de los organigramas en el análisis organizacional?
a) Muestran todas las relaciones informales de comunicación. b) Indicar con precisión el nivel de autoridad real de cada puesto. c) Aclarar las funciones, dependencias y la estructura jerárquica formal. d) Eliminar la necesidad de realizar entrevistas a los empleados.

26. ¿Qué técnica de recopilación de datos utiliza la observación de siete elementos comunes en una oficina para entender cómo se maneja la información?
a) Muestreo. b) ESTROBOSCÓPICO. c) Investigación documental. d) Cuestionario.

27. En UML, un estereotipo como se utiliza para:<<interface>>
a) Añadir una nota o comentario a una clase. b) Indicar que una clase es una interfaz y no una clase concreta. c) Definir una restricción sobre un atributo. d) Mostrar una relación de herencia.

28. El esquema 5W + 2H es una herramienta recomendable para:
a) Priorizar elementos en un Product Backlog. b) Ordenar las preguntas que surgen al inicio de un proyecto. c) Documentar los resultados de una retrospectiva. d) Crear el enunciado del problema en Design Thinking.

29. El ciclo continuo de "Inspección y Adaptación" en los entornos ágiles es el motor que permite:
a) Seguir un plan inicial rígido sin desviaciones. b) Responder eficazmente al cambio y mejorar de forma continua. c) Asegurar que el equipo trabaje más horas para cumplir los plazos. d) Eliminar la necesidad de colaborar con el cliente.

30. ¿Cuál de las siguientes combinaciones representa una sinergia efectiva entre diferentes metodologías para un proyecto completo?
a) Usar Scrum para definir el problema, luego un Diagrama de Gantt para el desarrollo, y finalmente FODA para el mantenimiento. b) Utilizar únicamente prácticas de eXtreme Programming (XP) para todo el ciclo de vida del proyecto, desde la idea hasta el despliegue. c) Emplear Design Thinking para descubrir y definir el problema correcto, Scrum para gestionar el desarrollo de forma iterativa, y prácticas de XP para asegurar la calidad del código. d) Crear un Plan de Proyecto detallado con un Diagrama PERT y luego no modificarlo durante todo el proyecto para garantizar el cumplimiento del cronograma.

Clave de Respuestas
b)
do)
do)
do)
do)
b)
d)
b)
b)
do)
b)
do)
do)
do)
b)
d)
do)
b)
do)
b)
do)
b)
do)
b)
do)
b)
b)
b)
b)
do)
¡Espero que este cuestionario te sea de gran ayuda para consolidar tus conocimientos y prepararte para tu examen! Mucho éxito.

ahora realizame un resumen de cada tema importante contodos los concetos reelevantes
perfil
GLM-4.5
15/09/2025 a las 16:57
¡Excelente! Un resumen temático es la forma perfecta de organizar la información y ver cómo todos los conceptos se conectan entre sí. Aquí tienes un resumen detallado de cada tema importante, integrando todos los conceptos relevantes que hemos discutido.

Resumen Temático de Conceptos Clave
I. Fundamentos de la Gestión de Proyectos y Análisis de Sistemas
Este tema establece las bases para entender qué es un proyecto, cómo se inicia y qué roles intervienen. Se centra en la justificación y planificación inicial del trabajo.

Concepto Central: Todo proyecto de sistemas nace de un problema o una oportunidad . El rol del Analista de Sistemas es crucial para traducir las necesidades del negocio en un enunciado formal: la Definición del Problema , que incluye las cuestiones (situación actual), los objetivos (situación deseada), los requerimientos (cosas que debe lograr el sistema) y las restricciones (limitaciones como tiempo o presupuesto).

Viabilidad y Selección: No todos los problemas merecen un proyecto. Se utilizan Criterios de Selección de Proyectos (respaldo de la administración, oportunidad, alineación con objetivos, practicidad y valor) para filtrar iniciativas. Una vez seleccionado un proyecto, se realiza un estudio de viabilidad para asegurarse de que es factible desde tres perspectivas:

Viabilidad Operacional: ¿El sistema se ajusta a las operaciones actuales de la empresa?
Viabilidad Técnica: ¿Tenemos la tecnología y el conocimiento para construirlo?
Viabilidad Económica: ¿Los beneficios superan a los costos? Aquí se analizan los costos y beneficios tangibles (fáciles de cuantificar) e intangibles (difíciles de medir, pero importantes), usando técnicas como el análisis de punto de equilibrio .
Planificación Inicial: Una vez que el proyecto sea viable, se formaliza a través de los Estándares del Proyecto (o Estatutos), que actúan como un contrato que define el alcance, métodos y resultados esperados. El Gerente de Proyecto es el responsable de liderar esta fase. Para planificar las tareas, se utilizan herramientas visuales como el Gráfico de Gantt (muestra la duración de las tareas) y el Diagrama PERT (muestra las dependencias entre tareas). El resultado final de esta fase inicial es una Propuesta de Sistemas detallada para la aprobación.

II. Recopilación de Información y Análisis Organizacional
Una vez que el proyecto está aprobado, el siguiente paso es entender a fondo el contexto actual, las necesidades de los usuarios y la estructura de la organización.

Técnicas de Recopilación: La principal herramienta es la entrevista . Para que sea efectiva, el analista debe seguir reglas (planificar, ser puntual) y usar estilos de preguntas de sondeo (relaciones, dependencias, repetición). Es común encontrar resistencia a ser entrevistado por miedo al cambio o falta de tiempo, por lo que el analista debe tener habilidades para manejarla. Para no abrumar a la organización, se utiliza el muestreo (selección sistemática de elementos representativos) y la investigación de documentos (cuantitativos como informes, y cualitativos como correos). Una técnica más avanzada es la Observación del entorno físico (STROBE) , que analiza el ambiente de trabajo para inferir cómo fluye la información.

Análisis del Contexto: Para entender el "terreno de juego", se utilizan herramientas de análisis organizacional. El Análisis FODA (FODA) es fundamental para evaluar los puntos fuertes, debilidades, oportunidades y amenazas del proyecto o la organización. Los organigramas ofrecen una visión gráfica de la estructura formal, mostrando jerarquías y funciones. Finalmente, el Esquema 5W + 2H (What, When, Who, Where, Why, How, How much) es una herramienta simple pero poderosa para estructurar las preguntas iniciales y asegurar que no se omita ningún aspecto relevante del contexto de la organización .

III. Metodologías Ágiles: Scrum y Programación Extrema (XP)
Este tema representa un cambio de paradigma: en lugar de un plan rígido, se adopta un enfoque flexible e iterativo para gestionar la incertidumbre y entregar valor continuamente.

Filosofía Ágil: El núcleo del agilismo es el Empirismo , que se basa en tres pilares: Transparencia (todos ven lo que está pasando), Inspección (se revisa el progreso frecuentemente) y Adaptación (se ajusta el curso según lo aprendido). El objetivo principal es maximizar el Valor entregado al cliente. Esto se logra a través de un desarrollo iterativo e incremental (ciclos cortos que producen software funcional) y una colaboración continua con el cliente . Un riesgo a gestionar es la Deuda Técnica , que son los "intereses" que pagamos en el futuro por tomar decisiones técnicas rápidas en el presente.

Scrum (El Framework): Es el marco de trabajo más popular. Se estructura en Sprints (ciclos de trabajo de 1 a 4 semanas) que producen un Incremento de producto "Terminado". Scrum define:

Roles: El Dueño de Producto (Product Owner) , que gestiona la Lista de Producto (Product Backlog) ; el Equipo de Desarrollo , que ejecuta el trabajo; y el Scrum Master , que facilita el proceso.
Eventos: La Planificación del Sprint , el Scrum Diario (reunión de sincronización), la Revisión del Sprint (para mostrar el avance) y la Retrospectiva del Sprint (para inspeccionar y adaptar el proceso).
Artefactos: Además del Product Backlog y el Incremento, está la Lista de Pendientes del Sprint (Sprint Backlog) . Un concepto crucial es la Definición de "Terminado" (Definition of Done) , que es el acuerdo del equipo sobre qué significa que una funcionalidad está completa.
Prácticas Técnicas (XP y complementos): eXtreme Programming (XP) aporta prácticas técnicas para garantizar la calidad del software dentro de los Sprints. El Diseño Simple (KISS) evita el sobrediseño. Los Código Estándar mejoran la legibilidad. Los Repositorios controlan las versiones del código. El trabajo se organiza en Historias de Usuario , que se validan mediante Criterios de Aceptación . Estos criterios se prueban con Test de Aceptación (que verifican el valor para el usuario) y Test Unitarios (que verifican el funcionamiento interno del código). Finalmente, los Test de Sistema prueban la aplicación como un todo. Para mejorar la comunicación, XP propone el uso de una Metáfora .

IV. Design Thinking: Enfoque Centrado en el Usuario
Design Thinking no es una metodología de gestión de proyectos, sino una mentalidad y un proceso para la innovación y resolución de problemas que pone a las personas en el centro.

Proceso Iterativo: Es un ciclo de aprendizaje que se divide en tres grandes fases (modelo Idean):

Descubrir (la oportunidad correcta): El objetivo es empatizar profundamente con el usuario para entender sus necesidades reales, no las que creemos que tiene. Se utilizan herramientas como Esperanzas y Miedos para explorar perspectivas, el análisis de Causa Principal para encontrar el origen del problema, Entrevistas 1:1 para recopilar historias, el Mapa de Empatía para sintetizar lo aprendido y el Journey Mapping para visualizar la experiencia completa del usuario. Toda esta información se traduce en preguntas inspiradoras ( Cómo podríamos-HMW ) y se consolida en un claro Enunciado del Problema .
Definir (el diseño correcto): Una vez entendido el problema, se explora una amplia gama de soluciones. Técnicas como Crazy Eights fomentan la creatividad generando muchas ideas rápidamente. El Storyboarding ayuda a narrar cómo una solución resolvería el problema del usuario. El Elevator Pitch obliga a definir el valor central de la propuesta. Finalmente, se crean prototipos de baja fidelidad (versiones simples y baratas de la idea) para poder validarla con usuarios reales de forma rápida.
Refinar (el diseño correcto): Esta fase es un ciclo continuo de iteración. Se toman los aprendizajes de los prototipos y se realizan "sprints de diseño" para perfeccionar la solución, prototipar de nuevo y validar, hasta llegar a un diseño pulido y listo para ser implementado.
V. Lenguaje de Modelado Unificado (UML)
UML es el lenguaje estándar para visualizar y documentar el diseño de un sistema de software. Proporciona un conjunto de diagramas para representar diferentes vistas del sistema.

Diagramas Estructurales: El más importante es el Diagrama de Clases , que muestra la estructura estática del sistema: las clases (representadas como cajas), sus atributos (lo que saben), sus operaciones (lo que hacen) y sus relaciones. Se pueden usar estereotipos como para indicar tipos especiales de clases, y notas para añadir comentarios o restricciones .<<interface>>

Diagramas de Comportamiento: Estos diagramas muestran cómo se comporta el sistema a lo largo del tiempo.

Diagrama de Caso de Uso: Muestra la funcionalidad del sistema desde la perspectiva del usuario. Es útil para asegurar que se cubren todos los requisitos.
Diagrama de Actividad: Similar a un flujograma, modela el flujo de trabajo de un proceso.
Diagrama de Estado: Describe los diferentes estados por los que puede pasar un objeto y los eventos que provocan las transiciones entre esos estados.
Precisión Formal: Para eliminar ambigüedades en los modelos, se puede utilizar el Lenguaje de Restricción de Objeto (LRO) , que permite escribir reglas formales sobre los elementos del modelo UML.

VI. Sinergia e Integración de Metodologías
Este es el concepto avanzado que unifica todo lo anterior. En el mundo real, no se elige "una" metodología, sino que se combinan las mejores herramientas de cada una para crear un flujo de trabajo adaptado al proyecto.

El Flujo Integrado Ideal:

Exploración y Definición (Design Thinking): Se comienza utilizando el proceso de Design Thinking para garantizar que se está resolviendo el problema correcto para las personas correctas . Las fases de Descubrir y Definir producen una comprensión profunda del usuario y una solución validada.
Planificación y Ejecución (Scrum): Una vez que se tiene una dirección clara, se utiliza Scrum para gestionar el desarrollo de forma ágil. El producto de Design Thinking alimenta la Lista de Producto (Product Backlog) . Los Sprints proporcionan la estructura para avanzar de forma iterativa, y los eventos de Scrum (Retrospectiva, Revisión) aseguran la inspección y adaptación constantes.
Calidad y Excelencia Técnica (XP): Dentro de cada Sprint, el Equipo de Desarrollo adopta las prácticas técnicas de XP para construir software de alta calidad. El Diseño Simple , los Test Unitarios y de Aceptación , y los Código Estándar son prácticas que se integran directamente en el trabajo diario del equipo para minimizar la Deuda Técnica .
Gestión y Contexto (Administración Clásica): Paralelamente, las herramientas clásicas como el Análisis FODA y los Organigramas siguen siendo relevantes para la gestión estratégica del proyecto y para entender el entorno organizacional en el que se inserta el nuevo sistema.
Esta sinergia demuestra un entendimiento maduro: no se trata de seguir un dogma, sino de utilizar el conjunto de herramientas más adecuado para entregar valor de manera sostenible y efectiva.
